// App modules used to create a separation of concerns (simple MVC)
// Acts as a simplified model
const budgetController = (() => {
	const Expense = function(id, desc, value) {
		this.id = id;
		this.desc = desc;
		this.value = value;
	};

	const Income = function(id, desc, value) {
		this.id = id;
		this.desc = desc;
		this.value = value;
	};

	const calculateTotal = type => {
		let total = data.items[type].reduce((sum, item) => sum + item.value, 0);
		data.totals[type] = total;
	};

	const data = {
		items: {
			expenses: [],
			income: []
		},
		totals: {
			expenses: 0,
			income: 0
		},
		budget: 0,
		percent: -1
	};

	return {
		addItem: (type, desc, value) => {
			let newItem, id;
			// Generate a random ID
			id = (
				Date.now().toString(36) +
				Math.random()
					.toString(36)
					.substr(2, 5)
			).toUpperCase();
			// Create a new item based on type
			type === 'expenses'
				? (newItem = new Expense(id, desc, value))
				: (newItem = new Income(id, desc, value));

			// Push item into the data structure
			data.items[type].push(newItem);
			return newItem;
		},
		deleteItem: attr => {
			const type = attr.split('-')[0];
			const id = attr.split('-')[1];
			// The find method would be more efficient but it is less compatible
			const removeIndex = data.items[type].map(item => item.id).indexOf(id);

			data.items[type].splice(removeIndex, 1);
		},
		calculateBudget: () => {
			// Calculate total income and expenses
			calculateTotal('expenses');
			calculateTotal('income');
			// Calculate the budget: income - expenses
			data.budget = data.totals.income - data.totals.expenses;
			// Calculate the percentage of income spent
			if (data.totals.income > 0) {
				data.percent = Math.round(
					(data.totals.expenses / data.totals.income) * 100
				);
			} else {
				data.percent = -1;
			}
		},
		getBudget: () => {
			return {
				budget: data.budget,
				totalIncome: data.totals.income,
				totalExpenses: data.totals.expenses,
				percent: data.percent
			};
		},
		testing: () => {
			console.log(data);
		}
	};
})();

// Handles the applications view
const UIController = (() => {
	const elements = {
		inputType: '.add__type',
		inputDesc: '.add__description',
		inputValue: '.add__value',
		inputBtn: '.add__btn',
		budgetLbl: '.budget__value',
		incomeLbl: '.budget__income--value',
		expensesLbl: '.budget__expenses--value',
		percentLbl: '.budget__expenses--percentage',
		container: '.container',
		expenseListItems: '.expenses__list > div',
		dateLbl: '.budget__title--month'
	};

	const formatNumber = num => {
		return num.toLocaleString(undefined, {
			minimumFractionDigits: 2,
			maximumFractionDigits: 2
		});
	};

	return {
		getInput: () => {
			return {
				type: document.querySelector(elements.inputType).value, // Either 'income' or 'expenses'
				desc: document.querySelector(elements.inputDesc).value,
				value: parseFloat(document.querySelector(elements.inputValue).value)
			};
		},
		addListItem: (item, type) => {
			// Create HTML string for income / expense item
			let html = `
			<div class="item clearfix" id="${type}-${item.id}">
				<div class="item__description">${item.desc}</div>
				<div class="right clearfix">
					<div class="item__value" data-value="${item.value}">${formatNumber(
				item.value
			)}</div>
					${type === 'expenses' ? '<div class="item__percentage">0%</div>' : ''}
					<div class="item__delete">
						<button class="item__delete--btn">
							<i class="ion-ios-close-outline" data-item="${type}-${item.id}">
							</i>
						</button>
					</div>
				</div>
			</div>
			`;
			// Insert HTML into the DOM
			document
				.querySelector(`.${type}__list`)
				.insertAdjacentHTML('beforeend', html);
		},
		displayBudget: obj => {
			document.querySelector(elements.budgetLbl).textContent = formatNumber(
				obj.budget
			);
			document.querySelector(elements.incomeLbl).textContent = formatNumber(
				obj.totalIncome
			);
			document.querySelector(elements.expensesLbl).textContent = formatNumber(
				obj.totalExpenses
			);
			let percent = document.querySelector(elements.percentLbl);
			if (obj.percent >= 0) {
				percent.textContent = obj.percent + '%';
			} else {
				percent.textContent = '---';
			}
		},
		displayPercents: totalIncome => {
			const listItems = document.querySelectorAll(elements.expenseListItems);
			listItems.forEach(item => {
				const expense = item.querySelector('.item__value');
				const percent = item.querySelector('.item__percentage');
				if (totalIncome > 0) {
					percent.textContent =
						Math.round((expense.dataset.value / totalIncome) * 100) + '%';
				} else {
					percent.textContent = '---';
				}
			});
		},
		deleteListItem: id => {
			document.getElementById(id).remove();
		},
		getElements: () => {
			return elements;
		},
		displayDate: () => {
			const monthNames = [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December'
			];
			const dateElement = document.querySelector(elements.dateLbl);
			const date = new Date();
			dateElement.textContent =
				monthNames[date.getMonth()] + ' ' + date.getFullYear();
		},
		changedType: () => {
			const inputs = document.querySelectorAll(
				elements.inputType +
					', ' +
					elements.inputDesc +
					', ' +
					elements.inputValue
			);

			inputs.forEach(input => {
				input.classList.toggle('red-focus');
			});

			document.querySelector(elements.inputBtn).classList.toggle('red');
		},
		clearInputs: () => {
			// Converted node list into an array to demonstrate using the call method on the Array prototype
			const inputs = document.querySelectorAll(
				elements.inputDesc + ', ' + elements.inputValue
			);
			const inputsArr = Array.prototype.slice.call(inputs);
			inputsArr.forEach(input => {
				input.value = '';
			});
			// Set focus on first input element
			inputsArr[0].focus();
		}
	};
})();

// Serves as the controller of the application
const controller = ((budgetCtrl, UICtrl) => {
	const setupEventListeners = () => {
		const UIElements = UICtrl.getElements();
		document
			.querySelector(UIElements.inputBtn)
			.addEventListener('click', ctrlAddItem);

		document.addEventListener('keypress', e => {
			// 'which' is used to support older browsers
			if (e.keyCode === 13 || e.which === 13) {
				ctrlAddItem();
			}
		});

		document
			.querySelector(UIElements.container)
			.addEventListener('click', ctrlDeleteItem);

		document
			.querySelector(UIElements.inputType)
			.addEventListener('change', UICtrl.changedType);
	};

	const updateBudget = () => {
		// 1. Recalculate the budget
		budgetCtrl.calculateBudget();
		// 2. Return the budget
		const budget = budgetCtrl.getBudget();
		// 3. Display the budget in the UI
		UICtrl.displayBudget(budget);
	};

	const updatePercents = () => {
		// 1. Get total income from budget
		const totalIncome = budgetCtrl.getBudget().totalIncome;
		// 2. Update UI with new percentages
		UICtrl.displayPercents(totalIncome);
	};

	const ctrlAddItem = () => {
		// 1. Get field input value
		const input = UICtrl.getInput();
		if (input.desc === '' || isNaN(input.value) || input.value === 0) {
			alert(
				'Please add description and valid dollar amount before submitting.'
			);
			return false;
		}
		// 2. Add item to the budget controller
		const newItem = budgetCtrl.addItem(input.type, input.desc, input.value);
		// 3. Add item to the UI
		UICtrl.addListItem(newItem, input.type);
		// 4. Clear input fields
		UICtrl.clearInputs();
		// 5. Calculate and update budget
		updateBudget();
		// 6. Calculate and update percentages
		updatePercents();
	};

	const ctrlDeleteItem = e => {
		if (e.target && e.target.nodeName === 'I') {
			// Get ID stored in a data attribute on the delete icon element
			const attr = e.target.dataset.item;
			// Delete node from the DOM
			UICtrl.deleteListItem(attr);
			// Delete item from budget array then recalculate and update budget
			budgetCtrl.deleteItem(attr);
			updateBudget();
			// recalculate and update percentages
			updatePercents();
		}
	};

	return {
		init: () => {
			console.log('Start');
			UICtrl.displayDate();
			setupEventListeners();
		}
	};
})(budgetController, UIController);

controller.init();


style.css

* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

.clearfix::after {
	content: '';
	display: table;
	clear: both;
}

body {
	color: #555;
	font-family: Open Sans;
	font-size: 16px;
	position: relative;
	height: 100vh;
	font-weight: 400;
}

.right {
	float: right;
}
.red {
	color: #ff5049 !important;
}
.red-focus:focus {
	border: 1px solid #ff5049 !important;
}

/**********************************************
*** TOP PART
**********************************************/

.top {
	height: 40vh;
	background-image: linear-gradient(rgba(0, 0, 0, 0.35), rgba(0, 0, 0, 0.35)),
		url('./background.jpg');
	background-size: cover;
	background-position: center;
	position: relative;
}

.budget {
	position: absolute;
	width: 350px;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	color: #fff;
}

.budget__title {
	font-size: 18px;
	text-align: center;
	margin-bottom: 10px;
	font-weight: 300;
}

.budget__value {
	font-weight: 300;
	font-size: 46px;
	text-align: center;
	margin-bottom: 25px;
	letter-spacing: 2px;
}

.budget__income,
.budget__expenses {
	padding: 12px;
	text-transform: uppercase;
}

.budget__income {
	margin-bottom: 10px;
	background-color: #28b9b5;
}

.budget__expenses {
	background-color: #ff5049;
}

.budget__income--text,
.budget__expenses--text {
	float: left;
	font-size: 13px;
	color: #444;
	margin-top: 2px;
}

.budget__income--value,
.budget__expenses--value {
	letter-spacing: 1px;
	float: left;
}

.budget__income--percentage,
.budget__expenses--percentage {
	float: left;
	width: 34px;
	font-size: 11px;
	padding: 3px 0;
	margin-left: 10px;
}

.budget__expenses--percentage {
	background-color: rgba(255, 255, 255, 0.2);
	text-align: center;
	border-radius: 3px;
}

/**********************************************
*** BOTTOM PART
**********************************************/

/***** FORM *****/
.add {
	padding: 14px;
	border-bottom: 1px solid #e7e7e7;
	background-color: #f7f7f7;
}

.add__container {
	margin: 0 auto;
	text-align: center;
}

.add__type {
	width: 55px;
	border: 1px solid #e7e7e7;
	height: 44px;
	font-size: 18px;
	color: inherit;
	background-color: #fff;
	margin-right: 10px;
	font-weight: 300;
	transition: border 0.3s;
}

.add__description,
.add__value {
	border: 1px solid #e7e7e7;
	background-color: #fff;
	color: inherit;
	font-family: inherit;
	font-size: 14px;
	padding: 12px 15px;
	margin-right: 10px;
	border-radius: 5px;
	transition: border 0.3s;
}

.add__description {
	width: 400px;
}
.add__value {
	width: 100px;
}

.add__btn {
	font-size: 35px;
	background: none;
	border: none;
	color: #28b9b5;
	cursor: pointer;
	display: inline-block;
	vertical-align: middle;
	line-height: 1.1;
	margin-left: 10px;
}

.add__btn:active {
	transform: translateY(2px);
}

.add__type:focus,
.add__description:focus,
.add__value:focus {
	outline: none;
	border: 1px solid #28b9b5;
}

.add__btn:focus {
	outline: none;
}

/***** LISTS *****/
.container {
	width: 1000px;
	margin: 60px auto;
}

.income {
	float: left;
	width: 475px;
	margin-right: 50px;
}

.expenses {
	float: left;
	width: 475px;
}

h2 {
	text-transform: uppercase;
	font-size: 18px;
	font-weight: 400;
	margin-bottom: 15px;
}

.icome__title {
	color: #28b9b5;
}
.expenses__title {
	color: #ff5049;
}

.item {
	padding: 13px;
	border-bottom: 1px solid #e7e7e7;
}

.item:first-child {
	border-top: 1px solid #e7e7e7;
}
.item:nth-child(even) {
	background-color: #f7f7f7;
}

.item__description {
	float: left;
}

.item__value {
	float: left;
	transition: transform 0.3s;
}

.item__percentage {
	float: left;
	margin-left: 20px;
	transition: transform 0.3s;
	font-size: 11px;
	background-color: #ffdad9;
	padding: 3px;
	border-radius: 3px;
	width: 32px;
	text-align: center;
}

.income .item__value,
.income .item__delete--btn {
	color: #28b9b5;
}

.expenses .item__value,
.expenses .item__percentage,
.expenses .item__delete--btn {
	color: #ff5049;
}

.item__delete {
	float: left;
}

.item__delete--btn {
	font-size: 22px;
	background: none;
	border: none;
	cursor: pointer;
	display: inline-block;
	vertical-align: middle;
	line-height: 1;
	display: none;
}

.item__delete--btn:focus {
	outline: none;
}
.item__delete--btn:active {
	transform: translateY(2px);
}

.item:hover .item__delete--btn {
	display: block;
}
.item:hover .item__value {
	transform: translateX(-20px);
}
.item:hover .item__percentage {
	transform: translateX(-20px);
}

.unpaid {
	background-color: #ffdad9 !important;
	cursor: pointer;
	color: #ff5049;
}

.unpaid .item__percentage {
	box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.1);
}
.unpaid:hover .item__description {
	font-weight: 900;
}


index.html


<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600" rel="stylesheet" type="text/css">
	<link href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css" rel="stylesheet" type="text/css">
	<link href="assets/favicon.ico" rel="icon" type="image/x-icon">
	<link type="text/css" rel="stylesheet" href="assets/style.css">
	<title>Budget App</title>
</head>

<body>

	<div class="top">
		<div class="budget">
			<div class="budget__title">
				Available Budget in
				<span class="budget__title--month"></span>:
			</div>

			<div class="budget__value">0</div>

			<div class="budget__income clearfix">
				<div class="budget__income--text">Income</div>
				<div class="right">
					<div class="budget__income--value">0</div>
					<div class="budget__income--percentage">&nbsp;</div>
				</div>
			</div>

			<div class="budget__expenses clearfix">
				<div class="budget__expenses--text">Expenses</div>
				<div class="right clearfix">
					<div class="budget__expenses--value">0</div>
					<div class="budget__expenses--percentage">0%</div>
				</div>
			</div>
		</div>
	</div>

	<div class="bottom">
		<div class="add">
			<div class="add__container">
				<select class="add__type">
					<option value="income" selected>+</option>
					<option value="expenses">-</option>
				</select>
				<input type="text" class="add__description" placeholder="Add description">
				<input type="number" class="add__value" placeholder="Value">
				<button class="add__btn">
					<i class="ion-ios-checkmark-outline"></i>
				</button>
			</div>
		</div>

		<div class="container clearfix">
			<div class="income">
				<h2 class="income__title">Income</h2>

				<div class="income__list">
				</div>
			</div>

			<div class="expenses">
				<h2 class="expenses__title">Expenses</h2>

				<div class="expenses__list">
				</div>
			</div>
		</div>
	</div>

	<script src="assets/app.js"></script>
</body>

</html>